extern crate widestring;
#[cfg(windows)]
extern crate winapi;

mod lib;
use lib::{
    append_file, close_handle, copy_self_to_path, create_file, get_current_path, get_file_size,
    get_proc_address, load_library, open_file, read_file, write_file,
};
use std::io::Error;

use std::ffi::CString;
use widestring::WideCString;

//https://github.com/jamalcoder/winapi-dynamic-api-call-using-rust/blob/master/src/main.rs

fn main() {
    testing();
}

fn testing() {
    use winapi::um::winnt::HANDLE;
    let dll_module =
        load_library("C:\\Users\\chuon\\OneDrive\\Desktop\\testing_malware\\malware_simple.dll");
    let create_file = get_proc_address(
        dll_module,
        "_ZN14malware_simple11create_file17h397a001df6317bd9E",
    );
    let write_file = get_proc_address(
        dll_module,
        "_ZN14malware_simple10write_file17h195927c44f537f77E",
    );

    let function_create: fn(&str) -> Result<HANDLE, Error>;
    let function_write: fn(HANDLE, Vec<u8>) -> Result<u32, Error>;
    function_create = unsafe { std::mem::transmute(create_file) };
    function_write = unsafe { std::mem::transmute(write_file) };

    let file_handle =
        function_create("C:\\Users\\chuon\\OneDrive\\Desktop\\testing_malware\\yayeet.txt")
            .unwrap();

    let mut string = "ya yeet".as_bytes();
    let mut buffer: Vec<u8> = Vec::new();
    for byte in string.iter() {
        buffer.push(byte.clone());
    }

    function_write(file_handle, buffer);
}
