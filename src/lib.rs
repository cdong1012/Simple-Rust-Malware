#[cfg(windows)]
extern crate winapi;
use std::ffi::OsStr;
use std::io::Error;
use std::iter::once;
use std::os::windows::ffi::OsStrExt;
use std::ptr::null_mut;
use winapi::um::fileapi::{CreateFileW, WriteFile, CREATE_NEW};
use winapi::um::winnt::{
    FILE_ATTRIBUTE_NORMAL, FILE_SHARE_READ, GENERIC_READ, GENERIC_WRITE, HANDLE,
};

#[cfg(windows)]
pub fn create_file(name: &str) -> Result<HANDLE, Error> {
    let wide_name: Vec<u16> = OsStr::new(name).encode_wide().chain(once(0)).collect();
    let file_handler = unsafe {
        CreateFileW(
            wide_name.as_ptr(),
            GENERIC_READ | GENERIC_WRITE,
            FILE_SHARE_READ,
            null_mut(),
            CREATE_NEW,
            FILE_ATTRIBUTE_NORMAL,
            null_mut(),
        )
    };
    return Ok(file_handler);
}

#[cfg(windows)]
pub fn write_file(file_handler: HANDLE, buffer: Vec<u8>) -> Result<u32, Error> {
    let mut byte_written = 0u32;
    unsafe {
        WriteFile(
            file_handler,
            buffer.as_ptr() as *const winapi::ctypes::c_void,
            (buffer.len()) as u32,
            &mut byte_written,
            null_mut(),
        );
    }

    return Ok(byte_written);
}
